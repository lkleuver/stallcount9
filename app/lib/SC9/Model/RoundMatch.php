<?php

/**
 * RoundMatch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class RoundMatch extends BaseRoundMatch{
	
	public function resultString($team_id) {
		// returns "15-8 win" , "2-3 loss", "9-9 tie", "break", or an error
		
		$scored=0;
		$received=0;
		$matchfound=false;
		if ($this->home_team_id == $team_id && !is_null($this->away_team_id)) {
			$scored=$this->homeScore;
			$received=$this->awayScore;
			$matchfound=true;	
		} elseif ($this->away_team_id == $team_id && !is_null($this->home_team_id)) {
			$scored=$this->awayScore;
			$received=$this->homeScore;
			$matchfound=true;
		} elseif ($this->home_team_id == $team_id || $this->away_team_id == $team_id ) {
			$bye=true;
		} else {
			die('team with id '.$team_id.' did not play in match with id '.$this->id);
		}

		if ($scored > $received) {
			return $scored.'-'.$received.' win';
		} elseif ($scored < $received) {
			return $scored.'-'.$received.' loss';
		} elseif ($scored == $received && $matchfound == true) {
			return $scored.'-'.$received.' tie';
		} elseif ($bye === true) { // team had a BYE  (" a break ")
			return 'break';
		} else {
			die('hae?');
		}
		
	}
	
	public function getPreviousMatch($team) {
		// returns the match where $team played and 
		// whose time slot was last before the time slot of $this match
		
		FB::log('trying to find the previous match of team '.$team->name);
		$previousTime=0;
		$previousMatch=false;
		foreach($team->HomeMatches as $homeMatch) {
			if ($homeMatch->scheduledTime > $previousTime && $homeMatch->scheduledTime < $this->scheduledTime) {
				$previousMatch=$homeMatch;
				$previousTime=$homeMatch->scheduledTime;
			}
		} 
		foreach($team->AwayMatches as $awayMatch) {
			if ($awayMatch->scheduledTime > $previousTime && $awayMatch->scheduledTime < $this->scheduledTime) {
				$previousMatch=$awayMatch;
				$previousTime=$awayMatch->scheduledTime;
			}
		} 
		
		FB::log('found match '.$previousMatch->HomeTeam->name.'-'.$previousMatch->AwayTeam->name);
		
		return $previousMatch;
	}
	
	public static function getById($id) {
		$q = Doctrine_Query::create()
			    ->from('RoundMatch m')
			    ->leftJoin('m.Round r')
			    ->leftJoin('r.Pool p')
			    ->leftJoin('m.HomeTeam ht')
			    ->leftJoin('m.AwayTeam at')
			    ->leftJoin('m.Field f')
			    ->where('m.id = ?', $id);
		$match = $q->fetchOne();
		return $match;
	}
		
	
	public function setScheduledTimeByFormat($s) {
		$pieces = explode(":", $s);
		if(count($pieces == 2)) {
			
			$hour = (int) $pieces[0];
			$minute = (int) $pieces[1];
			
			$this->scheduledTime = $hour * 60 + $minute;
		}
	}
	
	public function played() {
		return $this->homeScore != null;
	}
	
	public function homeWon() {
		if($this->homeScore != null && $this->awayScore != null) {
			return $this->homeScore >= $this->awayScore;
		}
		return false;
	}
	
	public function awayWon() {
		if($this->homeScore != null && $this->awayScore != null) {
			return $this->awayScore >= $this->homeScore;
		}
		return false;
	}
	
	public function printResult() {
		return $this->homeScore . " - ". $this->awayScore;
	}
	
	public function getFieldName() {
		if($this->Field != null) {
			return $this->Field->title;
		}
		return "empty";
	}
	public function getHomeName() {
		if($this->HomeTeam != null) {
			return $this->HomeTeam->name;
		}
		return $this->homeName;
	}
	
	public function getAwayName() {
		if($this->AwayTeam != null) {
			return $this->AwayTeam->name;
		}
		return $this->awayName;
	}
	
	public function timeFormatOLD() {
		$minutes = $this->scheduledTime;
		
		$hours = floor($minutes / 60);
		$minutes = $minutes - ($hours * 60);
		
		$hourString = $hours < 10 ? "0".$hours : $hours . "";
		$minuteString = $minutes < 10 ? "0".$minutes : $minutes . "";
		
		return $hourString .":".$minuteString;
	}

	public function timeOnly() {
		$timeParse=getdate($this->scheduledTime);		
		$hours = $timeParse['hours'];
		$minutes = $timeParse['minutes'];
		
		$minuteString = $minutes < 10 ? "0".$minutes : $minutes . "";
		
		// TODO: use date() instead
		return $hours.":".$minuteString;		
	} 
	
	public function timeFormat() {
		if ($this->scheduledTime === null) {
			return "unknown";
		}
		
		$timeParse=getdate($this->scheduledTime);		
		
		$hours = $timeParse['hours'];
		$minutes = $timeParse['minutes'];
		
		$hourString = $hours < 10 ? "0".$hours : $hours . "";
		$minuteString = $minutes < 10 ? "0".$minutes : $minutes . "";
		
		// TODO: use date() instead!
		return substr($timeParse['weekday'],0,3)." ".$hourString.":".$minuteString;
	}
	
	
}