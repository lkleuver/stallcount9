<?php

/**
 * SMS
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SMS extends BaseSMS
{
	public function createTimeNice() {
		if ($this->createTime === null) {
			return "unknown";
		}
		
		$timeParse=getdate($this->createTime);		
		
		$hours = $timeParse['hours'];
		$minutes = $timeParse['minutes'];
		$seconds = $timeParse['seconds'];
		
		$hourString = $hours < 10 ? "0".$hours : $hours . "";
		$minuteString = $minutes < 10 ? "0".$minutes : $minutes . "";
		$secondString = $seconds < 10 ? "0".$seconds : $seconds . "";
		
//		return substr($timeParse['weekday'],0,3)." ".$hourString.":".$minuteString.":".$secondString;

		return date("D H:i:s",$this->createTime);
	}
	
	
	public static function getById($smsId) {
		$q = Doctrine_Query::create()
			    ->from('SMS s')
			    ->leftJoin('s.Team t')
			    ->leftJoin('t.Division d')
			    ->where('s.id = ?', $smsId);
	 	FB::log($q->getSqlQuery());
		return $q->execute();
	}
	
	public static function getList($tournamentId) {
		$q = Doctrine_Query::create()
			    ->from('SMS s')
			    ->leftJoin('s.Team t')
			    ->leftJoin('s.Round r')
			    ->leftJoin('r.Pool p')
			    ->where('s.tournament_id = ?', $tournamentId)
			    ->orderBy('s.createTime ASC');
//	 	FB::log($q->getSqlQuery());
		return $q->execute();
	}
	
	public static function addOrdinalNumberSuffix($num) {
	    if (!in_array(($num % 100),array(11,12,13))){
	      switch ($num % 10) {
	        // Handle 1st, 2nd, 3rd
	        case 1:  return $num.'st';
	        case 2:  return $num.'nd';
	        case 3:  return $num.'rd';
	      }
	    }
	    return $num.'th';
	}
  
	public static function mysql_escape_mimic($inp) {
		if (is_null($inp)) {
			return '';
		}
	    if(is_array($inp))
	        return array_map(__METHOD__, $inp);
	
	    if(!empty($inp) && is_string($inp)) {
	        return str_replace(array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'), $inp);
	    }
	
	    return $inp;
	} 
	
}