<?php

/**
 * Division
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Division extends BaseDivision {
	
	private $_activeStage = null;
	
	//TODO: PoolRuleset ID Can't be always "1"
	public function initializeDivision() {
		//create registration stage and it's pool
		$stage = new Stage();
		$stage->title = "Registration stage";
		$stage->rank = 1;
		$stage->link('Division', array($this->id));
		$stage->save();
		
		
		$pool = new Pool();
		$pool->title = "Registration seeding";
		$pool->rank = 1;
		$pool->link('Stage', array($stage->id));
		$pr = PoolRuleset::getByTitle('Setup');
		$pool->pool_ruleset_id = $pr->id;
		$pool->save();
	}
	
	public function getNextRank() {
		$rank = 1;
		foreach($this->Stages as $stage) {
			if($stage->rank >= $rank) {
				$rank = $stage->rank + 1;
			}
		}
		return $rank;
	}
	
	//TODO: build in a check that makes sure the stages ranks are ascending
	/*
	 * pre: Stages length is not 0
	 */
	public function schedule() {
		foreach($this->Stages as $stage) {
			if($stage->rank != 1) {
				$stage->schedule();
			}
		}
		Windmill::assignFields($this);
	}
	
	public function spiritStandings() {
		// computes the current spirit standings
		FB::group('compute spirit standings of division '.$this->title);
		
		// compute spirit standings
		foreach($this->Teams as $team) {
			if ($team->byeStatus == 0) {
				$spirit = array('team_id' => $team->id, 'name' => $team->name, 'games' => 0, 'spiritaverage' => 0, 'spiritsum' => 0, 'received' => 0, 'given' => 0);
				foreach($team->HomeMatches as $match) {
					if (!is_null($match->homeScore) && !is_null($match->awayScore) ) {
						$spirit['games']++;
					}
					if (!is_null($match->homeSpirit)) {
						$spirit['spiritsum'] += $match->homeSpirit;
						$spirit['received']++;
					}
					if (!is_null($match->awaySpirit)) {
						$spirit['given']++;
					}
				}
				foreach($team->AwayMatches as $match) {
					if (!is_null($match->homeScore) && !is_null($match->awayScore) ) {
						$spirit['games']++;
					}
					if (!is_null($match->awaySpirit)) {
						$spirit['spiritsum'] += $match->awaySpirit;
						$spirit['received']++;
					}
					if (!is_null($match->homeSpirit)) {
						$spirit['given']++;
					}
				}
				
				if ($spirit['received'] > 0) {
					$spirit['spiritaverage'] = $spirit['spiritsum'] / $spirit['received'] ;
				}
				$standings[]=$spirit;
			}
		}
		
		usort($standings, array($this,'compareTeamsSpirit'));
			
		return $standings;
		
	}
	
	private function compareTeamsSpirit($a, $b) {
		//sort according to 
		// 1. spirit average
		// 2. # given
		// 3. # received
		
		if ($a['spiritaverage'] != $b['spiritaverage']) {
			return ($a['spiritaverage'] > $b['spiritaverage']) ? -1 : 1;
		} else {
			if ($a['given'] != $b['given']) {
				return ($a['given'] > $b['given']) ? -1 : 1;
			} else {
				if ($a['received'] != $b['received']) {
					return ($a['received'] > $b['received']) ? -1 : 1;
				} else {
					return 0;
				}
			}
		}		
	}	
	
	public function seedNextStage() {
		$lastFinishedStage = null;
		foreach($this->Stages as $stage) {
			if(!$stage->isFinished()) {
				if($lastFinishedStage != null) {
					$stage->seedWithTeams($lastFinishedStage->getQualifiedTeams());
					return;
				}
			}else{
				$lastFinishedStage = $stage;
			}
		}
	}
	
	public function getStageById($id) {
		foreach($this->Stages as $stage) {
			if($stage->id == $id) {
				return $stage;
			}
		}
		return null;
	}
	
	
	public function getActiveStage() {
		// returns the first stage with active rounds
		if($this->_activeStage == null) {
			foreach($this->Stages as $stage) {
				if($stage->getActiveRound() > 0) {
					$this->_activeStage = $stage;
				}
			}
		}
		return $this->_activeStage;
	}
	
	
	/**
	 * 
	 * Returns the ID of the first pool in the first stage (by rank)
	 */
	public function getSeedPoolId() {
		if(count($this->Stages) > 0) {
			if(count($this->Stages[0]->Pools) > 0) {
				return $this->Stages[0]->Pools[0]->id;
			}
		}
		return 1;
	}
	
	
	public static function getById($id) {
		$q = Doctrine_Query::create()
			    ->from('Division d')
			    ->leftJoin('d.Stages s')
			    ->leftJoin('d.Tournament t')
			    ->leftJoin('d.Teams tms')
			    ->leftJoin('s.Pools p')
			    ->where('d.id = ?', $id)
			    ->orderBy('s.rank ASC, p.rank ASC');
		$division = $q->fetchOne();
		return $division;
	}
	
	public static function getByIdLight($id) {
		$q = Doctrine_Query::create()
			    ->from('Division d')
			    ->leftJoin('d.Stages s')
			    ->where('d.id = ?', $id)
			    ->orderBy('s.rank ASC');
		$division = $q->fetchOne();
		return $division;
	}

}